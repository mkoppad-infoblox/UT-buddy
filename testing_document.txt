Test Case: test_gszonepart127
Module: infoblox.test.dns.test_gszonepart127.GSzonepart127
Category: Schema Validation / TSIG Key Handling / DNS Zone Reference
Issue Summary:
The test test_gszonepart127 fails with a DBKeyValueMissingError due to a missing tsig_key_name field when referencing a dns.zone_ext_secondary_server object.
Root Cause:
The Infoblox schema enforces the presence of the tsig_key_name field in dns.zone_ext_secondary_server references. Even if TSIG is not actively used in the test, omitting this field violates schema validation rules.
Resolution Strategy:
Update the test to include the tsig_key_name field in the reference dictionary. Options include:
Use an empty string ('') if the schema allows it as a placeholder.
Use a dummy value like 'dummy-tsig-key' if a non-empty string is required.
If the schema requires a valid TSIG key, create a dummy TSIG key object in the test database before referencing it.
Best Practices & Recommendations:
Always inspect schema requirements using tools like db.describe('object_type').
Include all mandatory fields in test references, even if they are not functionally relevant to the test logic.
Use placeholder or mock values to satisfy schema constraints without altering test intent.
Keywords for Retrieval:
DBKeyValueMissingError, tsig_key_name, Infoblox schema, dns.zone_ext_secondary_server, unit test failure, schema validation, TSIG key, test reference dictionary, mock TSIG key, test setup, Infoblox testing, Python unit test, db.ref(), schema enforcement
>?<
Test Case: test_dtc_consolidated_monitors
Module: infoblox.test.dns.test_dtc_upgrade.DtcUpgrade
Category: Assertion Handling / Dynamic Hostname / DNS Traffic Control
Issue Summary:
The test test_dtc_consolidated_monitors fails due to an assertion mismatch between a hardcoded expected error message and a dynamically generated one that includes a virtual node hostname.
Root Cause:
The test uses a static string (infoblox.localdomain) in an assertRaisesText assertion. However, the actual error message includes a dynamically generated hostname (member1.infoblox.com) from a virtual node created during test setup. This mismatch causes the assertion to fail.
Resolution Strategy:
To make the test environment-independent and robust:
Dynamically fetch the hostname from the virtual node using: 
vnode1.ref().fetch()['host_name']
Construct the expected error message using this value.
Replace the hardcoded string in the assertion with the dynamically formatted message.
Best Practices & Recommendations:
Avoid hardcoding values in assertions when dealing with runtime-generated data (e.g., hostnames, IPs, UUIDs).
Use dynamic references to ensure test resilience across different environments and configurations.
Validate only the static structure of error messages when dynamic content is expected.
Keywords for Retrieval:
assertRaisesText, dynamic hostname, unit test failure, Infoblox DTC, virtual node, test assertion mismatch, test_dtc_consolidated_monitors, hostname mismatch, Python unit test, dynamic error message, test robustness, environment-independent testing, Infoblox DNS, DtcUpgrade
>?<
Test Case: test_request_cloud_client_token
Module: infoblox.test.dns.wapi.test_threatinsight_cloudclient.WapiThreatInsightCloudClient27
Category: Error Message Handling / Dynamic Timing / pycurl
Issue Summary:
The test fails due to a mismatch between a static expected error message and a dynamic one generated by pycurl, which includes variable timing (e.g., “after 0 ms”, “after 1 ms”).
Root Cause:
pycurl generates error messages with dynamic timing values during connection failures. The test uses assertRaisesText with a fixed string, which fails to match the actual message due to this variability.
Resolution Strategy:
To make the test deterministic and compatible with dynamic content:
Catch the WAPIFaultBadRequest exception.
Extract the actual error message from the exception.
Use startswith(...) and endswith(...) to validate the static parts of the message.
Construct the expected message dynamically for use in assertEqual.
This avoids modifying the source code or using regex, preserving compatibility with existing infrastructure.
Best Practices & Recommendations:
Avoid hardcoding full error messages when they include dynamic elements like durations or timestamps.
Validate only the static structure or use partial matching techniques.
Ensure test assertions are resilient to runtime variability.
Keywords for Retrieval:
pycurl error, dynamic error message, assertRaisesText, unit test failure, Infoblox cloud client, WAPIFaultBadRequest, test_request_cloud_client_token, connection timing, test determinism, dynamic assertion, Infoblox WAPI, test reliability, CI pipeline
>?<
Test Case: test_status_time_searchfield
Module: infoblox.test.dns.test_idns_lb_object.IdnsLbObject
Category: Mock Data Consistency / Search Field Validation / LBDN Health
Issue Summary:
The test fails because the status_time field is missing for the LBDN object in the mock health data. This leads to discrepancies in search results when compared against expected output.
Root Cause:
The MockGridHealth used in the test provides status_time values for server and pool objects but omits it for the LBDN. As a result, the LbObjectCmd.read() method either excludes or misorders the LBDN in search results, depending on the criteria.
Resolution Strategy:
Update the mock health data to include a valid status_time for the LBDN object. This ensures consistent and deterministic behavior in search and sort operations, aligning actual results with test expectations.
Best Practices & Recommendations:
Always ensure mock data includes all relevant fields, especially those used in filtering or sorting logic.
When testing optional or dynamic fields, populate them consistently across all object types involved in the test.
Validate test coverage for edge cases where fields may be missing or null.
Keywords for Retrieval:
status_time, LBDN, mock health data, unit test failure, Infoblox, test_status_time_searchfield, search field validation, LbObjectCmd.read(), mock data consistency, Infoblox DNS, test determinism, dynamic field testing, health data mocking
>?<
Test Case: test_wrapper_metadata
Module: infoblox.test.dns.test_gm_sorter.TestGMSorterWrapper
Category: Metadata Validation / Format Transformation / Port Speed Normalization
Issue Summary:
The test fails with an AssertionError because the expected metadata value '100M' does not match the actual value 'M100' returned during execution.
Root Cause:
A transformation in the write_discovery_data function (in discovery_gm_sorter.c) rewrites port speed values from '100M' to 'M100'. This normalization was introduced as a workaround for inconsistent upstream input (e.g., from NETMRI), tracked under internal issue NIOS-100671.
Resolution Strategy:
To resolve the mismatch:
Option 1: Update the test to expect 'M100' instead of '100M'.
Option 2: Remove or conditionally apply the transformation logic if upstream systems have been fixed.
Option 3: Normalize upstream input to match expected format, allowing the workaround to be removed.
Best Practices & Recommendations:
Align test expectations with any transformation logic applied during processing.
If transformations are temporary or conditional, mock or explicitly document them in tests.
Ensure metadata validation tests reflect real-world input formats and system behavior.
Keywords for Retrieval:
port_speed, metadata mismatch, Infoblox GM Sorter, test_wrapper_metadata, write_discovery_data, format transformation, M100 vs 100M, unit test failure, metadata normalization, NETMRI, NIOS-100671, test assertion, Infoblox DNS, test_gm_sorter
>?<
Test Case: test_all
Module: infoblox.test.dns.test_gui_test_host_apixml.TestGuiTestHostApixml
Category: Object Type Validation / Zone Lock / Utility Function Robustness
Issue Summary:
The test fails with a DBMemberNameError during the deletion of a host record. The failure occurs because a utility function incorrectly assumes the object passed to it is a DNS zone, when in fact it is a DNS view.
Root Cause:
The utility function util_check_for_zone_lock() is designed to validate whether a DNS zone is locked. However, it does not verify the type of the object it receives. When a DNS view object is passed instead of a zone, the function attempts to access a non-existent locked attribute, triggering an exception.
Resolution Strategy:
Add a type check in util_check_for_zone_lock() to ensure it only operates on objects of type dns.zone. This prevents the function from misinterpreting and mishandling incompatible object types like dns.view.
Best Practices & Recommendations:
Always validate input types in utility functions, especially when multiple object types may share similar interfaces.
Use explicit type checks or interface validation to prevent runtime errors.
Document expected input types clearly in utility function definitions.
Keywords for Retrieval:
zone lock, DBMemberNameError, dns.view, dns.zone, Infoblox, test_all, utility function error, object type mismatch, Infoblox DNS, unit test failure, type validation, locked attribute, zone validation, test_gui_test_host_apixml
>?<
Test Case: test_CRU
Module: infoblox.test.dns.wapi.test_dtc_object.WapiDtcObject20
Category: Health Status Evaluation / DTC LBDN / Dynamic Field Assertion
Issue Summary:
The test fails because it expects the status of a DTC LBDN object (lbdn1) to be 'NONE', but the actual value returned is 'BLUE'. This causes assertion failures across multiple encoding formats (JSON, XML, etc.).
Root Cause:
The status field is dynamically computed using the get_health() function from idns_util.py, which evaluates the LBDN’s health via grid_health.get_lbdn_health(...). When the LBDN is configured but not yet actively monitored, the system assigns it a transitional status 'BLUE'. The test incorrectly assumes the object should remain in an unevaluated 'NONE' state.
Resolution Strategy:
Two valid approaches:
Update the test expectation to 'BLUE' to reflect the actual behavior of the health evaluation logic.
Modify the test setup to simulate an unevaluated state (e.g., by omitting pools or disabling the object) if 'NONE' is the desired status.
Best Practices & Recommendations:
When asserting dynamic fields like health status, ensure the test setup reflects the conditions under which each status is expected.
Document the meaning and lifecycle of each status code (NONE, BLUE, GREEN, etc.) to align test logic with system behavior.
Use conditional assertions or setup flags to handle transitional states in test environments.
Keywords for Retrieval:
DTC LBDN, status BLUE, status NONE, Infoblox, test_CRU, get_health(), grid_health, dynamic status, unit test failure, health evaluation, Infoblox DNS, test_dtc_object, transitional status, test setup, WapiDtcObject20
